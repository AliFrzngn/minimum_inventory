name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # Backend Tests and Linting
  backend-tests:
    name: Backend Tests & Linting
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_inventory_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov black isort flake8 mypy

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/test_inventory_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DEBUG=true" >> $GITHUB_ENV

    - name: Run Black (Code Formatting Check)
      working-directory: ./backend
      run: black --check --diff .

    - name: Run isort (Import Sorting Check)
      working-directory: ./backend
      run: isort --check-only --diff .

    - name: Run Flake8 (Linting)
      working-directory: ./backend
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run MyPy (Type Checking)
      working-directory: ./backend
      run: mypy app/ --ignore-missing-imports

    - name: Run Database Migrations
      working-directory: ./backend
      run: |
        alembic upgrade head

    - name: Run Tests with Coverage
      working-directory: ./backend
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests and Linting
  frontend-tests:
    name: Frontend Tests & Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Run TypeScript Check
      working-directory: ./frontend
      run: npm run type-check

    - name: Run Tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    - name: Build Application
      working-directory: ./frontend
      run: npm run build

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Security Tools
      run: |
        pip install bandit safety semgrep

    - name: Run Bandit Security Linter
      working-directory: ./backend
      run: bandit -r app/ -f json -o bandit-report.json || true

    - name: Run Safety Check
      working-directory: ./backend
      run: safety check --json --output safety-report.json || true

    - name: Run Semgrep Security Scan
      run: semgrep --config=auto --json --output=semgrep-report.json . || true

    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json
          semgrep-report.json

  # Docker Build and Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Backend Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: inventory-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Frontend Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: inventory-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        docker-compose config
        docker-compose build

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_inventory_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Backend Dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/test_inventory_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DEBUG=true" >> $GITHUB_ENV

    - name: Run Database Migrations
      working-directory: ./backend
      run: |
        alembic upgrade head

    - name: Start Backend Server
      working-directory: ./backend
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Start Frontend Server
      working-directory: ./frontend
      run: |
        npm run dev &
        sleep 15

    - name: Run Integration Tests
      run: |
        # Test API endpoints
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/api/docs || exit 1
        
        # Test frontend
        curl -f http://localhost:3000 || exit 1

  # Code Quality Gate
  code-quality:
    name: Code Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check Test Results
      run: |
        echo "Backend Tests: ${{ needs.backend-tests.result }}"
        echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        
        if [ "${{ needs.backend-tests.result }}" != "success" ]; then
          echo "Backend tests failed"
          exit 1
        fi
        
        if [ "${{ needs.frontend-tests.result }}" != "success" ]; then
          echo "Frontend tests failed"
          exit 1
        fi

  # Deploy to Staging (on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [code-quality, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose.staging.yml up -d

  # Notify on Failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, integration-tests]
    if: failure()

    steps:
    - name: Notify Failure
      run: |
        echo "CI/CD Pipeline failed. Please check the logs."
        # Add notification logic here (Slack, email, etc.)

