name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        echo "Backend image: ${{ needs.build-and-push.outputs.backend-image }}"
        echo "Frontend image: ${{ needs.build-and-push.outputs.frontend-image }}"
        
        # Add your staging deployment commands here
        # Example for Kubernetes:
        # kubectl set image deployment/inventory-backend backend=${{ needs.build-and-push.outputs.backend-image }} -n staging
        # kubectl set image deployment/inventory-frontend frontend=${{ needs.build-and-push.outputs.frontend-image }} -n staging
        # kubectl rollout status deployment/inventory-backend -n staging
        # kubectl rollout status deployment/inventory-frontend -n staging
        
        # Example for Docker Compose:
        # echo "BACKEND_IMAGE=${{ needs.build-and-push.outputs.backend-image }}" >> .env.staging
        # echo "FRONTEND_IMAGE=${{ needs.build-and-push.outputs.frontend-image }}" >> .env.staging
        # docker-compose -f docker-compose.staging.yml up -d

    - name: Run Health Checks
      run: |
        echo "Running health checks..."
        # Add health check commands here
        # curl -f https://staging-api.yourdomain.com/health || exit 1
        # curl -f https://staging.yourdomain.com || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        echo "Backend image: ${{ needs.build-and-push.outputs.backend-image }}"
        echo "Frontend image: ${{ needs.build-and-push.outputs.frontend-image }}"
        
        # Add your production deployment commands here
        # Example for Kubernetes:
        # kubectl set image deployment/inventory-backend backend=${{ needs.build-and-push.outputs.backend-image }} -n production
        # kubectl set image deployment/inventory-frontend frontend=${{ needs.build-and-push.outputs.frontend-image }} -n production
        # kubectl rollout status deployment/inventory-backend -n production
        # kubectl rollout status deployment/inventory-frontend -n production

    - name: Run Production Health Checks
      run: |
        echo "Running production health checks..."
        # Add production health check commands here
        # curl -f https://api.yourdomain.com/health || exit 1
        # curl -f https://yourdomain.com || exit 1

    - name: Notify Deployment Success
      run: |
        echo "Production deployment completed successfully!"
        # Add notification logic here (Slack, email, etc.)

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Rollback Deployment
      run: |
        echo "Rolling back deployment..."
        # Add rollback commands here
        # kubectl rollout undo deployment/inventory-backend -n ${{ github.event.inputs.environment || 'staging' }}
        # kubectl rollout undo deployment/inventory-frontend -n ${{ github.event.inputs.environment || 'staging' }}

    - name: Notify Rollback
      run: |
        echo "Deployment rolled back due to failure."
        # Add rollback notification logic here

