name: Code Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Backend Dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 mypy bandit safety

    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci

    # Backend Code Quality
    - name: Run Black (Code Formatting)
      working-directory: ./backend
      run: |
        black --check --diff . || (echo "Code formatting issues found. Run 'black .' to fix." && exit 1)

    - name: Run isort (Import Sorting)
      working-directory: ./backend
      run: |
        isort --check-only --diff . || (echo "Import sorting issues found. Run 'isort .' to fix." && exit 1)

    - name: Run Flake8 (Linting)
      working-directory: ./backend
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --max-line-length=88

    - name: Run MyPy (Type Checking)
      working-directory: ./backend
      run: |
        mypy app/ --ignore-missing-imports --strict-optional

    - name: Run Bandit (Security Linting)
      working-directory: ./backend
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -ll  # Show issues in console

    - name: Run Safety (Dependency Check)
      working-directory: ./backend
      run: |
        safety check --json --output safety-report.json || true
        safety check  # Show issues in console

    # Frontend Code Quality
    - name: Run ESLint
      working-directory: ./frontend
      run: |
        npm run lint || (echo "ESLint issues found. Please fix them." && exit 1)

    - name: Run TypeScript Check
      working-directory: ./frontend
      run: |
        npm run type-check || (echo "TypeScript errors found. Please fix them." && exit 1)

    - name: Check for Console Logs
      working-directory: ./frontend
      run: |
        if grep -r "console\." src/ --include="*.ts" --include="*.tsx"; then
          echo "Warning: Console logs found in production code. Consider removing them."
        fi

    - name: Check for TODO Comments
      run: |
        echo "Checking for TODO comments..."
        if grep -r "TODO\|FIXME\|HACK" backend/ frontend/ --include="*.py" --include="*.ts" --include="*.tsx"; then
          echo "Found TODO/FIXME/HACK comments. Consider addressing them."
        fi

    - name: Upload Code Quality Reports
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json

